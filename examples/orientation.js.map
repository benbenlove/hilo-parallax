{"version":3,"sources":["webpack:///./~/_hilojs@1.0.5@hilojs/view/Graphics.js?2c79","webpack:///./examples/orientation.js","webpack:///./~/_hilojs@1.0.5@hilojs/view/CacheMixin.js?84a5"],"names":["Demo","props","gamma","mouseMove","e","x","clientX","bgWrapper","cameraAnimateTo","dpr","orientationHandler","Math","abs","console","log","round","init","stage","background","bg0","drawBg","y","bg1","childrens","depth","children","loop","type","duration","width","height","addChild","window","addEventListener","color","bg","grap","beginFill","drawCircle","endFill"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,oDAAoD;AACpD,yCAAyC,sBAAsB,EAAE;AACjE,8DAA8D;AAC9D,eAAe,OAAO;AACtB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,gCAAgC;AAChC;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0B;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA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","file":"examples/orientation.js","sourcesContent":["/**\n * Hilo 1.0.5 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Hilo = require('../core/Hilo');\nvar Class = require('../core/Class');\nvar View = require('./View');\nvar CacheMixin = require('./CacheMixin');\n\n\n\n/**\n * @language=en\n * <iframe src='../../../examples/Graphics.html?noHeader' width = '320' height = '400' scrolling='no'></iframe>\n * <br/>\n * @class Graphics class contains a group of functions for creating vector graphics.\n * @augments View\n * @mixes CacheMixin\n * @borrows CacheMixin#cache as #cache\n * @borrows CacheMixin#updateCache as #updateCache\n * @borrows CacheMixin#setCacheDirty as #setCacheDirty\n * @param {Object} properties Properties parameters of the object to create. Contains all writable properties of this class.\n * @module hilo/view/Graphics\n * @requires hilo/core/Hilo\n * @requires hilo/core/Class\n * @requires hilo/view/View\n * @requires hilo/view/CacheMixin\n * @property {Number} lineWidth The thickness of lines in space units, default value is 1, readonly!\n * @property {Number} lineAlpha The alpha value (transparency) of line, default value is 1, readonly!\n * @property {String} lineCap The style of how every end point of line are drawn, value options: butt, round, square. default value is null, readonly!\n * @property {String} lineJoin The joint style of two lines. value options: miter, round, bevel. default value is null, readonly!\n * @property {Number} miterLimit The miter limit ratio in space units, works only when lineJoin value is miter. default value is 10, readonly!\n * @property {String} strokeStyle The color or style to use for lines around shapes, default value is 0 (the black color), readonly!\n * @property {String} fillStyle The color or style to use inside shapes, default value is 0 (the black color), readonly!\n * @property {Number} fillAlpha The transparency of color or style inside shapes, default value is 0, readonly!\n */\nvar Graphics = (function(){\n\nvar canvas = document.createElement('canvas');\nvar helpContext = canvas.getContext && canvas.getContext('2d');\n\nreturn Class.create(/** @lends Graphics.prototype */{\n    Extends: View,\n    Mixes:CacheMixin,\n    constructor: function(properties){\n        properties = properties || {};\n        this.id = this.id || properties.id || Hilo.getUid('Graphics');\n        Graphics.superclass.constructor.call(this, properties);\n\n        this._actions = [];\n    },\n\n    lineWidth: 1,\n    lineAlpha: 1,\n    lineCap: null, //'butt', 'round', 'square'\n    lineJoin: null, //'miter', 'round', 'bevel'\n    miterLimit: 10,\n    hasStroke: false,\n    strokeStyle: '0',\n    hasFill: false,\n    fillStyle: '0',\n    fillAlpha: 0,\n\n    /**\n     * @language=en\n     * Set the lines style for drawing shapes.\n     * @param {Number} thickness The thickness of lines, default value is 1.\n     * @param {String} lineColor The CSS color value of lines, default value is 0 (the black color).\n     * @param {Number} lineAlpha The transparency of lines, default value is 1 (fully opaque).\n     * @param {String} lineCap The style of how every end point of line are drawn, value options: butt, round, square. default value is null.\n     * @param {String} lineJoin The joint style of two lines. value options: miter, round, bevel. default value is null.\n     * @param {Number} miterLimit The miter limit ratio in space units, works only when lineJoin value is miter. default value is 10.\n     * @returns {Graphics} The Graphics Object.\n     */\n    lineStyle: function(thickness, lineColor, lineAlpha, lineCap, lineJoin, miterLimit){\n        var me = this, addAction = me._addAction;\n\n        addAction.call(me, ['lineWidth', (me.lineWidth = thickness || 1)]);\n        addAction.call(me, ['strokeStyle', (me.strokeStyle = lineColor || '0')]);\n        addAction.call(me, ['lineAlpha', (me.lineAlpha = lineAlpha || 1)]);\n        if(lineCap != undefined) addAction.call(me, ['lineCap', (me.lineCap = lineCap)]);\n        if(lineJoin != undefined) addAction.call(me, ['lineJoin', (me.lineJoin = lineJoin)]);\n        if(miterLimit != undefined) addAction.call(me, ['miterLimit', (me.miterLimit = miterLimit)]);\n        me.hasStroke = true;\n        return me;\n    },\n\n    /**\n     * @language=en\n     * Set how to fill shapes and the transparency.\n     * @param {String} fill Filling style. this can be color, gradient or pattern.\n     * @param {Number} alpha Transparency.\n     * @returns {Graphics} The Graphics Object.\n     */\n    beginFill: function(fill, alpha){\n        var me = this, addAction = me._addAction;\n\n        addAction.call(me, ['fillStyle', (me.fillStyle = fill)]);\n        addAction.call(me, ['fillAlpha', (me.fillAlpha = alpha || 1)]);\n        me.hasFill = true;\n        return me;\n    },\n\n    /**\n     * @language=en\n     * Apply and end lines-drawing and shapes-filling.\n     * @returns {Graphics} The Graphics Object.\n     */\n    endFill: function(){\n        var me = this, addAction = me._addAction;\n\n        if(me.hasStroke) addAction.call(me, ['stroke']);\n        if(me.hasFill) addAction.call(me, ['fill']);\n        me.setCacheDirty(true);\n        return me;\n    },\n\n    /**\n     * @language=en\n     * Set linear gradient filling style to draw shapes.\n     * @param {Number} x0 The x-coordinate value of the linear gradient start point.\n     * @param {Number} y0 The y-coordinate value of the linear gradient start point.\n     * @param {Number} x1 The x-coordinate value of the linear gradient end point.\n     * @param {Number} y1 The y-coordinate value of the linear gradient end point.\n     * @param {Array} colors An array of CSS colors used in the linear gradient.\n     * @param {Array} ratios An array of position between start point and end point, should be one-to-one to colors in the colors array. each value range between 0.0 to 1.0.\n     * @returns {Graphics} The Graphics Object.\n     */\n    beginLinearGradientFill: function(x0, y0, x1, y1, colors, ratios){\n        var me = this, gradient = helpContext.createLinearGradient(x0, y0, x1, y1);\n\n        for (var i = 0, len = colors.length; i < len; i++){\n            gradient.addColorStop(ratios[i], colors[i]);\n        }\n        me.hasFill = true;\n        return me._addAction(['fillStyle', (me.fillStyle = gradient)]);\n    },\n\n    /**\n     * @language=en\n     * Set radial gradient filling style to draw shapes.\n     * @param {Number} x0 The x-coordinate value of the radial gradient start circle.\n     * @param {Number} y0 The y-coordinate value of the radial gradient start circle.\n     * @param {Number} r0 The diameter of the radial gradient start circle.\n     * @param {Number} x1 The x-coordinate value of the radial gradient end circle.\n     * @param {Number} y1 The y-coordinate value of the radial gradient end circle.\n     * @param {Number} r1 The radius of the radial gradient end circle.\n     * @param {Array} colors An array of CSS colors used in the radial gradient.\n     * @param {Array} ratios An array of position between start circle and end circle, should be one-to-one to colors in the colors array. each value range between 0.0 to 1.0.\n     * @returns {Graphics} The Graphics Object.\n     */\n    beginRadialGradientFill: function(x0, y0, r0, x1, y1, r1, colors, ratios){\n        var me = this, gradient = helpContext.createRadialGradient(x0, y0, r0, x1, y1, r1);\n        for (var i = 0, len = colors.length; i < len; i++)\n        {\n            gradient.addColorStop(ratios[i], colors[i]);\n        }\n        me.hasFill = true;\n        return me._addAction(['fillStyle', (me.fillStyle = gradient)]);\n    },\n\n    /**\n     * @language=en\n     * Begin an image filling pattern.\n     * @param {HTMLImageElement} image The Image to fill.\n     * @param {String} repetition The fill repetition style, can be one of valus:repeat, repeat-x, repeat-y, no-repeat. default valus is ''.\n     * @returns {Graphics} The Graphics Object.\n     */\n    beginBitmapFill: function(image, repetition){\n        var me = this, pattern = helpContext.createPattern(image, repetition || '');\n        me.hasFill = true;\n        return me._addAction(['fillStyle', (me.fillStyle = pattern)]);\n    },\n\n    /**\n     * @language=en\n     * Begin a new path.\n     * @returns {Graphics} The Graphics Object.\n     */\n    beginPath: function(){\n        return this._addAction(['beginPath']);\n    },\n\n    /**\n     * @language=en\n     * Close current path.\n     * @returns {Graphics} The Graphics Object.\n     */\n    closePath: function(){\n        return this._addAction(['closePath']);\n    },\n\n    /**\n     * @language=en\n     * Move current drawing point to a new point on coordinate values (x, y).\n     * @param {Number} x The x-coordinate value.\n     * @param {Number} y The y-coordinate value.\n     * @returns {Graphics} The Graphics Object.\n     */\n    moveTo: function(x, y){\n        return this._addAction(['moveTo', x, y]);\n    },\n\n    /**\n     * @language=en\n     * Draw a line from current point to the point on the coordinate value (x, y).\n     * @param {Number} x The x-coordinate value.\n     * @param {Number} y The y-coordinate value.\n     * @returns {Graphics} The Graphics Object.\n     */\n    lineTo: function(x, y){\n        return this._addAction(['lineTo', x, y]);\n    },\n\n    /**\n     * @language=en\n     * Draw a quadratic Bézier curve from current point to the point on coordinate (x, y).\n     * @param {Number} cpx The x-coordinate value of the Bézier curve control point cp.\n     * @param {Number} cpy The y-coordinate value of the Bézier curve control point cp.\n     * @param {Number} x The x-coordinate value.\n     * @param {Number} y The y-coordinate value.\n     * @returns {Graphics} The Graphics Object.\n     */\n    quadraticCurveTo: function(cpx, cpy, x, y){\n        return this._addAction(['quadraticCurveTo', cpx, cpy, x, y]);\n    },\n\n    /**\n     * @language=en\n     * Draw a Bézier curve from current point to the point on coordinate (x, y).\n     * @param {Number} cp1x The x-coordinate value of the Bézier curve control point cp1.\n     * @param {Number} cp1y The y-coordinate value of the Bézier curve control point cp1.\n     * @param {Number} cp2x The x-coordinate value of the Bézier curve control point cp2.\n     * @param {Number} cp2y The y-coordinate value of the Bézier curve control point cp2.\n     * @param {Number} x The x-coordinate value.\n     * @param {Number} y The y-coordinate value.\n     * @returns {Graphics} The Graphics Object.\n     */\n    bezierCurveTo: function(cp1x, cp1y, cp2x, cp2y, x, y){\n        return this._addAction(['bezierCurveTo', cp1x, cp1y, cp2x, cp2y, x, y]);\n    },\n\n    /**\n     * @language=en\n     * Draw a rectangle.\n     * @param {Number} x The x-coordinate value.\n     * @param {Number} y The y-coordinate value.\n     * @param {Number} width The width of the rectangle.\n     * @param {Number} height The height of the rectangle.\n     * @returns {Graphics} The Graphics Object.\n     */\n    drawRect: function(x, y, width, height){\n        return this._addAction(['rect', x, y, width, height]);\n    },\n\n    /**\n     * @language=en\n     * Draw a complex rounded rectangle.\n     * @param {Number} x The x-coordinate value.\n     * @param {Number} y The y-coordinate value.\n     * @param {Number} width The width of rounded rectangle.\n     * @param {Number} height The height of rounded rectangle.\n     * @param {Number} cornerTL The size of the rounded corner on the top-left of the rounded rectangle.\n     * @param {Number} cornerTR The size of the rounded corner on the top-right of the rounded rectangle.\n     * @param {Number} cornerBR The size of the rounded corner on the bottom-left of the rounded rectangle.\n     * @param {Number} cornerBL The size of the rounded corner on the bottom-right of the rounded rectangle.\n     * @returns {Graphics} The Graphics Object.\n     */\n    drawRoundRectComplex: function(x, y, width, height, cornerTL, cornerTR, cornerBR, cornerBL){\n        var me = this, addAction = me._addAction;\n        addAction.call(me, ['moveTo', x + cornerTL, y]);\n        addAction.call(me, ['lineTo', x + width - cornerTR, y]);\n        addAction.call(me, ['arc', x + width - cornerTR, y + cornerTR, cornerTR, -Math.PI/2, 0, false]);\n        addAction.call(me, ['lineTo', x + width, y + height - cornerBR]);\n        addAction.call(me, ['arc', x + width - cornerBR, y + height - cornerBR, cornerBR, 0, Math.PI/2, false]);\n        addAction.call(me, ['lineTo', x + cornerBL, y + height]);\n        addAction.call(me, ['arc', x + cornerBL, y + height - cornerBL, cornerBL, Math.PI/2, Math.PI, false]);\n        addAction.call(me, ['lineTo', x, y + cornerTL]);\n        addAction.call(me, ['arc', x + cornerTL, y + cornerTL, cornerTL, Math.PI, Math.PI*3/2, false]);\n        return me;\n    },\n\n    /**\n     * @language=en\n     * Draw a rounded rectangle.\n     * @param {Number} x The x-coordinate value.\n     * @param {Number} y The y-coordinate value.\n     * @param {Number} width The width of rounded rectangle.\n     * @param {Number} height The height of rounded rectangle.\n     * @param {Number} cornerSize The size of all rounded corners.\n     * @returns {Graphics} The Graphics Object.\n     */\n    drawRoundRect: function(x, y, width, height, cornerSize){\n        return this.drawRoundRectComplex(x, y, width, height, cornerSize, cornerSize, cornerSize, cornerSize);\n    },\n\n    /**\n     * @language=en\n     * Draw a circle.\n     * @param {Number} x The x-coordinate value.\n     * @param {Number} y The y-coordinate value.\n     * @param {Number} radius The radius of the circle.\n     * @returns {Graphics} The Graphics Object.\n     */\n    drawCircle: function(x, y, radius){\n        return this._addAction(['arc', x + radius, y + radius, radius, 0, Math.PI * 2, 0]);\n    },\n\n    /**\n     * @language=en\n     * Draw an ellipse.\n     * @param {Number} x The x-coordinate value.\n     * @param {Number} y The y-coordinate value.\n     * @param {Number} width The width of the ellipse.\n     * @param {Number} height The height of the ellipse.\n     * @returns {Graphics} The Graphics Object.\n     */\n    drawEllipse: function(x, y, width, height){\n        var me = this;\n        if(width == height) return me.drawCircle(x, y, width);\n\n        var addAction = me._addAction;\n        var w = width / 2, h = height / 2, C = 0.5522847498307933, cx = C * w, cy = C * h;\n        x = x + w;\n        y = y + h;\n\n        addAction.call(me, ['moveTo', x + w, y]);\n        addAction.call(me, ['bezierCurveTo', x + w, y - cy, x + cx, y - h, x, y - h]);\n        addAction.call(me, ['bezierCurveTo', x - cx, y - h, x - w, y - cy, x - w, y]);\n        addAction.call(me, ['bezierCurveTo', x - w, y + cy, x - cx, y + h, x, y + h]);\n        addAction.call(me, ['bezierCurveTo', x + cx, y + h, x + w, y + cy, x + w, y]);\n        return me;\n    },\n\n    /**\n     * @language=en\n     * Draw a path from the SVG data given by parameters. Not support Arcs.\n     * Demo:\n     * <p>var path = 'M250 150 L150 350 L350 350 Z';</p>\n     * <p>var shape = new Hilo.Graphics({width:500, height:500});</p>\n     * <p>shape.drawSVGPath(path).beginFill('#0ff').endFill();</p>\n     * @param {String} pathData The SVG path data to draw.\n     * @returns {Graphics} The Graphics Object.\n     */\n    drawSVGPath: function(pathData){\n        var me = this, addAction = me._addAction,\n            path = pathData.replace(/,/g, ' ').replace(/-/g, ' -').split(/(?=[a-zA-Z])/);\n        addAction.call(me, ['beginPath']);\n        var currentPoint = {x:0, y:0};\n        var lastControlPoint = {x:0, y:0};\n        var lastCmd;\n        for(var i = 0, len = path.length; i < len; i++){\n            var str = path[i];\n            if(!str.length){\n                continue;\n            }\n            var realCmd = str[0];\n            var cmd = realCmd.toUpperCase();\n            var p = this._getSVGParams(str);\n            var useRelative = cmd !== realCmd;\n\n            switch(cmd){\n                case 'M':\n                    if(useRelative){\n                        this._convertToAbsolute(currentPoint, p);\n                    }\n                    addAction.call(me, ['moveTo', p[0], p[1]]);\n                    this._setCurrentPoint(currentPoint, p[0], p[1]);\n                    break;\n                case 'L':\n                    if(useRelative){\n                        this._convertToAbsolute(currentPoint, p);\n                    }\n                    addAction.call(me, ['lineTo', p[0], p[1]]);\n                    this._setCurrentPoint(currentPoint, p[0], p[1]);\n                    break;\n                case 'H':\n                    if(useRelative){\n                        p[0] += currentPoint.x;\n                    }\n                    addAction.call(me, ['lineTo', p[0], currentPoint.y]);\n                    currentPoint.x = p[0];\n                    break;\n                case 'V':\n                    if(useRelative){\n                        p[0] += currentPoint.y;\n                    }\n                    addAction.call(me, ['lineTo', currentPoint.x, p[0]]);\n                    currentPoint.y = p[0];\n                    break;\n                case 'Z':\n                    addAction.call(me, ['closePath']);\n                    break;\n                case 'C':\n                    if(useRelative){\n                        this._convertToAbsolute(currentPoint, p);\n                    }\n                    addAction.call(me, ['bezierCurveTo', p[0], p[1], p[2], p[3], p[4], p[5]]);\n                    lastControlPoint.x = p[2];\n                    lastControlPoint.y = p[3];\n                    this._setCurrentPoint(currentPoint, p[4], p[5]);\n                    break;\n                case 'S':\n                    if(useRelative){\n                        this._convertToAbsolute(currentPoint, p);\n                    }\n                    if(lastCmd === 'C' || lastCmd === 'S'){\n                        controlPoint = this._getReflectionPoint(currentPoint, lastControlPoint);\n                    }\n                    else{\n                        controlPoint = currentPoint;\n                    }\n                    addAction.call(me, ['bezierCurveTo', controlPoint.x, controlPoint.y, p[0], p[1], p[2], p[3]]);\n                    lastControlPoint.x = p[0];\n                    lastControlPoint.y = p[1];\n                    this._setCurrentPoint(currentPoint, p[2], p[3]);\n                    break;\n                case 'Q':\n                    if(useRelative){\n                        this._convertToAbsolute(currentPoint, p);\n                    }\n                    addAction.call(me, ['quadraticCurveTo', p[0], p[1], p[2], p[3]]);\n                    lastControlPoint.x = p[0];\n                    lastControlPoint.y = p[1];\n                    this._setCurrentPoint(currentPoint, p[2], p[3]);\n                    break;\n                case 'T':\n                    if(useRelative){\n                        this._convertToAbsolute(currentPoint, p);\n                    }\n                    var controlPoint;\n                    if(lastCmd === 'Q' || lastCmd === 'T'){\n                        controlPoint = this._getReflectionPoint(currentPoint, lastControlPoint);\n                    }\n                    else{\n                        controlPoint = currentPoint;\n                    }\n                    addAction.call(me, ['quadraticCurveTo', controlPoint.x, controlPoint.y, p[0], p[1]]);\n                    lastControlPoint = controlPoint;\n                    this._setCurrentPoint(currentPoint, p[0], p[1]);\n                    break;                \n            }\n            lastCmd = cmd;\n            \n        }\n        return me;\n    },\n    _getSVGParams:function(str){\n        var p = str.substring(1).replace(/[\\s]+$|^[\\s]+/g, '').split(/[\\s]+/);\n        if(p[0].length == 0) {\n            p.shift();\n        }\n        for(var i = 0, l = p.length;i < l;i ++){\n            p[i] = parseFloat(p[i]);\n        }\n        return p;\n    },\n    _convertToAbsolute:function(currentPoint, data){\n        for(var i = 0, l = data.length;i < l;i ++){\n            if(i%2 === 0){\n                data[i] += currentPoint.x;\n            }\n            else{\n                data[i] += currentPoint.y;\n            }\n        }\n    },\n    _setCurrentPoint:function(currentPoint, x, y){\n        currentPoint.x = x;\n        currentPoint.y = y;\n    },\n    _getReflectionPoint:function(centerPoint, point){\n        return {\n            x:centerPoint.x * 2 - point.x,\n            y:centerPoint.y * 2 - point.y\n        };\n    },\n\n    /**\n     * @language=en\n     * Apply all draw actions. private function.\n     * @private\n     */\n    _draw: function(context){\n        var me = this, actions = me._actions, len = actions.length, i;\n\n        context.beginPath();\n        for(i = 0; i < len; i++){\n            var action = actions[i],\n                f = action[0],\n                args = action.length > 1 ? action.slice(1) : null;\n\n            if(typeof(context[f]) == 'function') context[f].apply(context, args);\n            else context[f] = action[1];\n        }\n    },\n\n    /**\n     * @language=en\n     * Overwrite render function.\n     * @private\n     */\n    render: function(renderer, delta){\n        var me = this;\n        if(renderer.renderType === 'canvas'){\n            me._draw(renderer.context);\n        }else{\n            me.cache();\n            renderer.draw(me);\n        }\n    },\n\n    /**\n     * @language=en\n     * Clear all draw actions and reset to the initial state.\n     * @returns {Graphics} The Graphics Object.\n     */\n    clear: function(){\n        var me = this;\n\n        me._actions.length = 0;\n        me.lineWidth = 1;\n        me.lineAlpha = 1;\n        me.lineCap = null;\n        me.lineJoin = null;\n        me.miterLimit = 10;\n        me.hasStroke = false;\n        me.strokeStyle = '0';\n        me.hasFill = false;\n        me.fillStyle = '0';\n        me.fillAlpha = 1;\n\n        me.setCacheDirty(true);\n        return me;\n    },\n\n    /**\n     * @language=en\n     * Add a draw action, this is a private function.\n     * @private\n     */\n    _addAction: function(action){\n        var me = this;\n        me._actions.push(action);\n        return me;\n    }\n\n});\n\n})();\n\n\nmodule.exports = Graphics;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_hilojs@1.0.5@hilojs/view/Graphics.js\n// module id = 10\n// module chunks = 0 1","import initStage from 'hilo-init-stage';\nimport Graphics from 'hilojs/view/Graphics';\nimport Container from 'hilojs/view/Container';\n// import Ease from 'hilojs/tween/Ease';\nimport Parallax from '../';\n\nclass Demo extends initStage {\n  gamma = 0;\n  constructor(props) {\n    super(props);\n    this.init();\n    this.stage.background = '#000';\n  }\n\n  init() {\n    const bg0 = this.drawBg('#ff0000');\n    bg0.x = 50 * this.dpr;\n    bg0.y = 100 * this.dpr;\n    const bg1 = this.drawBg('#ffff00');\n    bg1.x = 150 * this.dpr;\n    bg1.y = 150 * this.dpr;\n\n    this.bgWrapper = new Parallax({\n      childrens: [\n        {\n          depth: 0.5,\n          children: bg0,\n        },\n        {\n          depth: 1,\n          children: bg1,\n        },\n      ],\n      loop: false,\n      type: 'x',\n      duration: 500,\n      // stack: 'add',\n      // ease: Ease.Quad.EaseInOut,\n      width: this.width,\n      height: this.height,\n    });\n    this.stage.addChild(this.bgWrapper);\n    window.addEventListener('deviceorientation', this.orientationHandler);\n    window.addEventListener('mousemove', this.mouseMove);\n  }\n\n  drawBg(color) {\n    const bg = new Container();\n    const grap = new Graphics();\n    grap.beginFill(color).drawCircle(0, 0, 50 * this.dpr).endFill();\n    bg.addChild(grap);\n    return bg;\n  }\n\n  mouseMove = (e) => {\n    const x = e.clientX;\n    this.bgWrapper.cameraAnimateTo(-x / 2 * this.dpr);\n  }\n\n  orientationHandler = (e) => {\n    if (Math.abs(this.gamma - e.gamma) >= 5) {\n      console.log(Math.round(e.gamma));\n      this.bgWrapper.cameraAnimateTo(e.gamma * -3 * this.dpr);\n      this.gamma = e.gamma;\n    }\n  }\n}\n\nnew Demo();\n\n\n\n// WEBPACK FOOTER //\n// ./examples/orientation.js","/**\n * Hilo 1.0.5 for commonjs\n * Copyright 2016 alibaba.com\n * Licensed under the MIT License\n */\nvar Hilo = require('../core/Hilo');\nvar Drawable = require('./Drawable');\n\n\n\nvar _cacheCanvas, _cacheContext;\n/**\n * @language=en\n * @class CacheMixin A mixin that contains cache method.You can mix cache method to the target by use Class.mix(target, CacheMixin).\n * @static\n * @mixin\n * @module hilo/view/CacheMixin\n * @requires hilo/core/Hilo\n * @requires hilo/view/Drawable\n */\nvar CacheMixin = /** @lends CacheMixin# */ {\n    _cacheDirty:true,\n    /**\n     * @language=en\n     * Cache the view.\n     * @param {Boolean} forceUpdate is force update cache.\n     */\n    cache: function(forceUpdate){\n        if(forceUpdate || this._cacheDirty || !this.drawable){\n            this.updateCache();\n        }\n    },\n    /**\n     * @language=en\n     * Update the cache.\n     */\n    updateCache:function(){\n        if(Hilo.browser.supportCanvas){\n            if(!_cacheCanvas){\n                _cacheCanvas = document.createElement('canvas');\n                _cacheContext = _cacheCanvas.getContext('2d');\n            }\n\n            //TODO:width, height自动判断\n            _cacheCanvas.width = this.width;\n            _cacheCanvas.height = this.height;\n            this._draw(_cacheContext);\n            this.drawable = this.drawable||new Drawable();\n            this.drawable.init({\n                image:_cacheCanvas.toDataURL()\n            });\n            this._cacheDirty = false;\n        }\n    },\n    /**\n     * @language=en\n     * set the cache state diry.\n     * @param {Boolean} dirty is cache dirty\n     */\n    setCacheDirty:function(dirty){\n        this._cacheDirty = dirty;\n    }\n};\n\nmodule.exports = CacheMixin;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_hilojs@1.0.5@hilojs/view/CacheMixin.js\n// module id = 9\n// module chunks = 0 1"],"sourceRoot":""}